{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ionide Ionide is a Visual Studio Code package suite for cross platform F# development. Overview Ionide for VSCode is set of 3 plugins avaliable in VSCode marketplace. Ionide-fsharp - provides F# specific features including advanced editor features (autocomplete, go-to definition, tooltips, rename, various refactorings and quick fix suggestions), integration with .Net project system, project explorer for project file visualization and manipulation, integration with MsBuild for building and running applications, debugger integration and more. Ionide-Paket - provides integration with Paket - package dependency manager for .NET with support for NuGet packages and GitHub repositories. Ionide-FAKE - FAKE (F# Make) is popular F# tool and DSL for build orchestration. Requirements Visual Studio Code - it is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux created by Microsoft. For detailed documentation of editor, getting-started guides and more visit official documentation . F# - it is a mature, open source, cross-platform, functional-first programming language. It empowers users and organizations to tackle complex computing problems with simple, maintainable and robust code. Ionide supports any version of F# = 3.0 but we do recommend using F# 4.1. Detailed installation instructions can be found of F# Software foundation webpage - for Windows , MacOS , and Linux MsBuild 2015 (Windows only) - On Windows MsBuild 2015 (14.0) needs to be additionally installed. You can download it here .Net Core SDK - .Net Core is lightweight, cross platform, modern implementation of .Net Framework. We strongly recommend installing it since some advanced Ionide features such as debugging and project scaffolding depends on SDK and dotnet CLI tooling even if your application is targetting Full Framework. For detailed instructions on installing .Net Core visit official step-by-step installation guide VSCode C# plugin - Ionide's debugging capabilities relays on the debugger provided by Omnisharp team. To get it install C# extension from VSCode marketplace Plugin installation Any VSCode extension can be installed using UI just inside VSCode. Bring up the Extensions view by clicking on the Extensions icon in the Activity Bar on the side of VS Code or the View: Extensions command ( Ctrl+Shift+X ). Then in search box type Ionide to find all 3 extensions we provide. Click the Install button and after a successful install, you'll see an Reload button which will prompt you to restart VS Code to enable the new extension. For more detailed information about plugin installation visit VSCode documentation Plugin activation VSCode plugins are running in external processes (which means they should never impact editor performance) and are activated lazily, when certain activation events happens. This means that plugins are not loaded unnecesserly, for example when you don't work on project using given programming language. Ionide plugins are activated when: Opened workspace contains any .fsproj , .fs , or .fsx file New .fsproj , .fs , or .fsx file is created in workspace that was not containing those files before.","title":"Home"},{"location":"#ionide","text":"Ionide is a Visual Studio Code package suite for cross platform F# development.","title":"Ionide"},{"location":"#overview","text":"Ionide for VSCode is set of 3 plugins avaliable in VSCode marketplace. Ionide-fsharp - provides F# specific features including advanced editor features (autocomplete, go-to definition, tooltips, rename, various refactorings and quick fix suggestions), integration with .Net project system, project explorer for project file visualization and manipulation, integration with MsBuild for building and running applications, debugger integration and more. Ionide-Paket - provides integration with Paket - package dependency manager for .NET with support for NuGet packages and GitHub repositories. Ionide-FAKE - FAKE (F# Make) is popular F# tool and DSL for build orchestration.","title":"Overview"},{"location":"#requirements","text":"Visual Studio Code - it is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux created by Microsoft. For detailed documentation of editor, getting-started guides and more visit official documentation . F# - it is a mature, open source, cross-platform, functional-first programming language. It empowers users and organizations to tackle complex computing problems with simple, maintainable and robust code. Ionide supports any version of F# = 3.0 but we do recommend using F# 4.1. Detailed installation instructions can be found of F# Software foundation webpage - for Windows , MacOS , and Linux MsBuild 2015 (Windows only) - On Windows MsBuild 2015 (14.0) needs to be additionally installed. You can download it here .Net Core SDK - .Net Core is lightweight, cross platform, modern implementation of .Net Framework. We strongly recommend installing it since some advanced Ionide features such as debugging and project scaffolding depends on SDK and dotnet CLI tooling even if your application is targetting Full Framework. For detailed instructions on installing .Net Core visit official step-by-step installation guide VSCode C# plugin - Ionide's debugging capabilities relays on the debugger provided by Omnisharp team. To get it install C# extension from VSCode marketplace","title":"Requirements"},{"location":"#plugin-installation","text":"Any VSCode extension can be installed using UI just inside VSCode. Bring up the Extensions view by clicking on the Extensions icon in the Activity Bar on the side of VS Code or the View: Extensions command ( Ctrl+Shift+X ). Then in search box type Ionide to find all 3 extensions we provide. Click the Install button and after a successful install, you'll see an Reload button which will prompt you to restart VS Code to enable the new extension. For more detailed information about plugin installation visit VSCode documentation","title":"Plugin installation"},{"location":"#plugin-activation","text":"VSCode plugins are running in external processes (which means they should never impact editor performance) and are activated lazily, when certain activation events happens. This means that plugins are not loaded unnecesserly, for example when you don't work on project using given programming language. Ionide plugins are activated when: Opened workspace contains any .fsproj , .fs , or .fsx file New .fsproj , .fs , or .fsx file is created in workspace that was not containing those files before.","title":"Plugin activation"},{"location":"architecture/","text":"Plugin architecture VSCode plugin FsAutoComplete F# Compiler services","title":"Architecture"},{"location":"architecture/#plugin-architecture","text":"","title":"Plugin architecture"},{"location":"architecture/#vscode-plugin","text":"","title":"VSCode plugin"},{"location":"architecture/#fsautocomplete","text":"","title":"FsAutoComplete"},{"location":"architecture/#f-compiler-services","text":"","title":"F# Compiler services"},{"location":"commands/","text":"List of commands","title":"List of commands"},{"location":"commands/#list-of-commands","text":"","title":"List of commands"},{"location":"debugger/","text":"Debugging Requirements VSCode C# plugin (Omnisharp) Works for projects using new, SDK-based project files Portable PDB","title":"Debugging"},{"location":"debugger/#debugging","text":"","title":"Debugging"},{"location":"debugger/#requirements","text":"VSCode C# plugin (Omnisharp) Works for projects using new, SDK-based project files Portable PDB","title":"Requirements"},{"location":"editing/","text":"Editing evolved Ionide provides variety of language features known from more IDEs such as VS, and set of innovative features that makes you more productive then ever when writting F# code like CodeLenses, integration with FSharpLint and Quick Fixes. Basic features Following documentation is basic overview of features from Ionide's point of view. If you want to learn more about capabilities of VSCode visit official documentation . We strongly recommend exploring detailed VSCode documentation, especially if you've never worked with similar (Atom, ST3) editor before. IntelliSense If Ionide knows possible completions, the IntelliSense suggestions will pop up as you type. If you continue typing characters, the list of members (variables, methods, etc.) is filtered to include only members containing your typed characters. Pressing Tab or Enter will insert the selected member. You can trigger IntelliSense in any editor window by typing Ctrl+Space or by typing a trigger character (such as the dot character ( . )). Tip: The suggestions widget supports CamelCase filtering meaning you can type the letters which are upper cased in a method name to limit the suggestions. For example, \"cra\" will quickly bring up \"createApplication\". Additionally, Ionide provides autocompletion for symbols not defined in currently opened modules and namespaces. If you accept such complition with Tab or Enter it will automatically insert appropriate open statement. This behaviour is controlled by FSharp.externalAutocomplete setting (default value is true ). Additionally, you can see quick info for each method by either pressing Ctrl+Space or clicking the info icon. The accompanying documentation for the method will now expand to the side. The expanded documentation will stay so and will update as you navigate the list. You can close this by pressing Ctrl+Space again or by clicking on the close icon. Tooltips Ionide provides rich information about the symbols you hover on - structured signature and nicely formatted documentation text supporting markdown inside of the comments and transforming standard XML comment tags into markdown representation. Tip: If you press Ctrl while hovering Ionide will also put the body of the symbol in the tooltip. Error highlighting Ionide provides fast error highlighting for local changes, changes in current project and cross project changes without any need to build projects. Error highlighting for current projects works as you edit code, it suports files not saved to disk. For cross project error reporting you need to save the file - it will queue background project typechecking which will provide errors asynchronusly without blocking any editor operations. Errors in VSCode are shown in multiple places: In the status bar, there is a summary of all errors and warnings counts. You can click on the summary or press Ctrl+Shift+M to display the PROBLEMS panel with a list of all current errors. * If you open a file that has errors or warnings, they will be rendered inline with the text and in the overview ruler. Tip: To loop through errors or warnings in the current file, you can press F8 or Shift+F8 which will show an inline zone detailing the problem and possible code actions (if available). CodeLens and LineLens Ionide displays type signatures of the symbols either as information over the symbol (inserting virtual line) or as inlined information next to symbol. The behaviour is customizable with editor.codeLens , FSharp.lineLens.enabled and FSharp.lineLens.* settings. Quick Info panel You can check the type of symbol on which cursor currently is in the left part of VSCode Status Bar (bottom bar with different additional informations about current postion and file) Code navigation Visual Studio Code has a high productivity code editor which, when combined with programming language services, gives you the power of an IDE and the speed of a text editor. In this part we will show different ways of navigating around the code. Go to definition Ionide provides going to symbol definition. You can do that by pressing F12 , pressing right click on symbol and choosing Go to definition or by using Ctrl+Click or running Go to definition from Command Palette. Tip: You can use Ctrl+Alt+Click or open the definition to the side in additional editor panel. Go to type definition Ionide provides going to definition of the type of current symbol if the type was defined in local workspace. You can do that by running the Go to Type Definition command from either the editor context menu or the Command Palette. Tip: The command editor.action.goToTypeDefinition is not bound to a keyboard shortcut by default but you can add your own custom keybinding. Go to symbol in file You can navigate symbols inside a file with Ctrl+Shift+O . Just press Up or Down and navigate to the place you want. Tip: By typing : the symbols will be grouped by category. Go to symbol in workspace Ionide support jumping to a symbol across files with Ctrl+T . Just type the first letter of a symbol you want to navigate to, regardless of which file contains it, and press Enter . Find all refrences Peek definition Ionide also implements providers for finding all refrences ( Shift+F12 ) of the symbol in currently open solution and peeking definition of the symbol ( Alt+F12 ). VSCode provides peeked editors which enables you to see the source code of the other file inlined without switching context. You can navigate between different references in the peeked editor and make quick edits right there. Clicking on the peeked editor filename or double-clicking in the result list will open the reference in the outer editor. Bracket matching Matching brackets will be highlighted as soon as the cursor is near one of them. Tip: You can jump to the matching bracket with Ctrl+Shift+\\ Go to next symbol usage Usages of symbol in current file will be highlighted as soon as the cursor is on the symbol. Tip: You can jump to the next/previous usage with F7 and Shift+F7 Go to MSDN help Ionide provides command for opening MSDN documentation for given symbol. It works only for symbols from F# standard library, and .Net standard library. You can execute command with Shift+F1 or from Command Palette ( F#: Get Help ). CodeOutline panel Ionide provides live updated panel showing symbols in current file. It's avaliable as a additional tree view ( F# Code Outline ) in VSCode Explorer panel. On the panel you can notice 2 buttons - right one collapse ( Click ) or extends ( Alt+Click ) all elements in the tree, left one refreshes default collapsing (only modules and namespaces extended, types collapsed). Tip: Clicking on any node in the tree will move you to the place in file where symbol is defined. It's really useful for navigating around huge files. Advanced analyzers FSharpLint integration Unused value analyzer Unnecessery open statement analyzer Simplify name analyzer Refactorings Rename symbol Quick fixes Generate comment scaffold","title":"Editing evolved"},{"location":"editing/#editing-evolved","text":"Ionide provides variety of language features known from more IDEs such as VS, and set of innovative features that makes you more productive then ever when writting F# code like CodeLenses, integration with FSharpLint and Quick Fixes.","title":"Editing evolved"},{"location":"editing/#basic-features","text":"Following documentation is basic overview of features from Ionide's point of view. If you want to learn more about capabilities of VSCode visit official documentation . We strongly recommend exploring detailed VSCode documentation, especially if you've never worked with similar (Atom, ST3) editor before.","title":"Basic features"},{"location":"editing/#intellisense","text":"If Ionide knows possible completions, the IntelliSense suggestions will pop up as you type. If you continue typing characters, the list of members (variables, methods, etc.) is filtered to include only members containing your typed characters. Pressing Tab or Enter will insert the selected member. You can trigger IntelliSense in any editor window by typing Ctrl+Space or by typing a trigger character (such as the dot character ( . )). Tip: The suggestions widget supports CamelCase filtering meaning you can type the letters which are upper cased in a method name to limit the suggestions. For example, \"cra\" will quickly bring up \"createApplication\". Additionally, Ionide provides autocompletion for symbols not defined in currently opened modules and namespaces. If you accept such complition with Tab or Enter it will automatically insert appropriate open statement. This behaviour is controlled by FSharp.externalAutocomplete setting (default value is true ). Additionally, you can see quick info for each method by either pressing Ctrl+Space or clicking the info icon. The accompanying documentation for the method will now expand to the side. The expanded documentation will stay so and will update as you navigate the list. You can close this by pressing Ctrl+Space again or by clicking on the close icon.","title":"IntelliSense"},{"location":"editing/#tooltips","text":"Ionide provides rich information about the symbols you hover on - structured signature and nicely formatted documentation text supporting markdown inside of the comments and transforming standard XML comment tags into markdown representation. Tip: If you press Ctrl while hovering Ionide will also put the body of the symbol in the tooltip.","title":"Tooltips"},{"location":"editing/#error-highlighting","text":"Ionide provides fast error highlighting for local changes, changes in current project and cross project changes without any need to build projects. Error highlighting for current projects works as you edit code, it suports files not saved to disk. For cross project error reporting you need to save the file - it will queue background project typechecking which will provide errors asynchronusly without blocking any editor operations. Errors in VSCode are shown in multiple places: In the status bar, there is a summary of all errors and warnings counts. You can click on the summary or press Ctrl+Shift+M to display the PROBLEMS panel with a list of all current errors. * If you open a file that has errors or warnings, they will be rendered inline with the text and in the overview ruler. Tip: To loop through errors or warnings in the current file, you can press F8 or Shift+F8 which will show an inline zone detailing the problem and possible code actions (if available).","title":"Error highlighting"},{"location":"editing/#codelens-and-linelens","text":"Ionide displays type signatures of the symbols either as information over the symbol (inserting virtual line) or as inlined information next to symbol. The behaviour is customizable with editor.codeLens , FSharp.lineLens.enabled and FSharp.lineLens.* settings.","title":"CodeLens and LineLens"},{"location":"editing/#quick-info-panel","text":"You can check the type of symbol on which cursor currently is in the left part of VSCode Status Bar (bottom bar with different additional informations about current postion and file)","title":"Quick Info panel"},{"location":"editing/#code-navigation","text":"Visual Studio Code has a high productivity code editor which, when combined with programming language services, gives you the power of an IDE and the speed of a text editor. In this part we will show different ways of navigating around the code.","title":"Code navigation"},{"location":"editing/#go-to-definition","text":"Ionide provides going to symbol definition. You can do that by pressing F12 , pressing right click on symbol and choosing Go to definition or by using Ctrl+Click or running Go to definition from Command Palette. Tip: You can use Ctrl+Alt+Click or open the definition to the side in additional editor panel.","title":"Go to definition"},{"location":"editing/#go-to-type-definition","text":"Ionide provides going to definition of the type of current symbol if the type was defined in local workspace. You can do that by running the Go to Type Definition command from either the editor context menu or the Command Palette. Tip: The command editor.action.goToTypeDefinition is not bound to a keyboard shortcut by default but you can add your own custom keybinding.","title":"Go to type definition"},{"location":"editing/#go-to-symbol-in-file","text":"You can navigate symbols inside a file with Ctrl+Shift+O . Just press Up or Down and navigate to the place you want. Tip: By typing : the symbols will be grouped by category.","title":"Go to symbol in file"},{"location":"editing/#go-to-symbol-in-workspace","text":"Ionide support jumping to a symbol across files with Ctrl+T . Just type the first letter of a symbol you want to navigate to, regardless of which file contains it, and press Enter .","title":"Go to symbol in workspace"},{"location":"editing/#find-all-refrences-peek-definition","text":"Ionide also implements providers for finding all refrences ( Shift+F12 ) of the symbol in currently open solution and peeking definition of the symbol ( Alt+F12 ). VSCode provides peeked editors which enables you to see the source code of the other file inlined without switching context. You can navigate between different references in the peeked editor and make quick edits right there. Clicking on the peeked editor filename or double-clicking in the result list will open the reference in the outer editor.","title":"Find all refrences &amp; Peek definition"},{"location":"editing/#bracket-matching","text":"Matching brackets will be highlighted as soon as the cursor is near one of them. Tip: You can jump to the matching bracket with Ctrl+Shift+\\","title":"Bracket matching"},{"location":"editing/#go-to-next-symbol-usage","text":"Usages of symbol in current file will be highlighted as soon as the cursor is on the symbol. Tip: You can jump to the next/previous usage with F7 and Shift+F7","title":"Go to next symbol usage"},{"location":"editing/#go-to-msdn-help","text":"Ionide provides command for opening MSDN documentation for given symbol. It works only for symbols from F# standard library, and .Net standard library. You can execute command with Shift+F1 or from Command Palette ( F#: Get Help ).","title":"Go to MSDN help"},{"location":"editing/#codeoutline-panel","text":"Ionide provides live updated panel showing symbols in current file. It's avaliable as a additional tree view ( F# Code Outline ) in VSCode Explorer panel. On the panel you can notice 2 buttons - right one collapse ( Click ) or extends ( Alt+Click ) all elements in the tree, left one refreshes default collapsing (only modules and namespaces extended, types collapsed). Tip: Clicking on any node in the tree will move you to the place in file where symbol is defined. It's really useful for navigating around huge files.","title":"CodeOutline panel"},{"location":"editing/#advanced-analyzers","text":"","title":"Advanced analyzers"},{"location":"editing/#fsharplint-integration","text":"","title":"FSharpLint integration"},{"location":"editing/#unused-value-analyzer","text":"","title":"Unused value analyzer"},{"location":"editing/#unnecessery-open-statement-analyzer","text":"","title":"Unnecessery open statement analyzer"},{"location":"editing/#simplify-name-analyzer","text":"","title":"Simplify name analyzer"},{"location":"editing/#refactorings","text":"","title":"Refactorings"},{"location":"editing/#rename-symbol","text":"","title":"Rename symbol"},{"location":"editing/#quick-fixes","text":"","title":"Quick fixes"},{"location":"editing/#generate-comment-scaffold","text":"","title":"Generate comment scaffold"},{"location":"fake/","text":"FAKE integration","title":"FAKE integration"},{"location":"fake/#fake-integration","text":"","title":"FAKE integration"},{"location":"general/","text":"General information FsAutoComplete Service Runtime The Ionide plugin relies on the F# compiler services for processing code in the editor. The compiler services can run under the full framework (requiring mono on non-Windows platforms) or they can run under .NET Core as of Ionide 3.13.0. This experimental feature can be enabled in the user settings. Preferences Settings and add a new setting FSharp.fsacRuntime : netcore There are two options: net (default) full framework netcore .NET Core framework After updating this setting, execute the \"Reload Window\" command in VS Code for the setting to take effect. NOTE: projects that use functionality incompatible with .NET Core, such as type providers, require this be set to net in order for the F# Autocomplete Service to process code using these features.","title":"General info"},{"location":"general/#general-information","text":"","title":"General information"},{"location":"general/#fsautocomplete-service-runtime","text":"The Ionide plugin relies on the F# compiler services for processing code in the editor. The compiler services can run under the full framework (requiring mono on non-Windows platforms) or they can run under .NET Core as of Ionide 3.13.0. This experimental feature can be enabled in the user settings. Preferences Settings and add a new setting FSharp.fsacRuntime : netcore There are two options: net (default) full framework netcore .NET Core framework After updating this setting, execute the \"Reload Window\" command in VS Code for the setting to take effect. NOTE: projects that use functionality incompatible with .NET Core, such as type providers, require this be set to net in order for the F# Autocomplete Service to process code using these features.","title":"FsAutoComplete Service Runtime"},{"location":"how-to-contribute/","text":"How to contribute Prerequisites Visual Studio Code \ud83d\ude44 Mono .Net Core 2.0 Node.js Yarn Building Fork, from the github interface https://github.com/ionide/ionide-vscode-fsharp - if you don't use a certificate for commiting to github: git clone https://github.com/YOUR_GITHUB_USER/ionide-vscode-fsharp.git if you use a certificate for github authentication: git clone git@github.com:YOUR_GITHUB_USER/ionide-vscode-fsharp.git First time build: cd ionide-vscode-fsharp yarn install dotnet restore cd src dotnet restore cd .. ./build.sh # or build.cmd if your OS is Windows Everything is done via build.cmd \\ build.sh . build Build does a full-build, including package installation and copying some necessary files. It should always be done at least once after any clone/pull. If a git dependency fail to build paket won't re-do it you can run their build scripts manually: In paket-files\\github.com\\fsharp\\FsAutoComplete run build LocalRelease In paket-files\\github.com\\fsharp-editing\\Forge run build Build In VSCode two configurations are possible to run: Use Build and Launch Extension Start the Watch task and when a build is done start Launch Only Working with FSAC Run build.cmd Build \\ build.sh Build Open Ionide-vscode-fsharp in VSCode. Set devMode to true in src/Core/LanguageService.fs Open FSAC in VS Start FSAC.Suave in VS Press F5 in VSCode to build Ionide and start experimental instance","title":"How to contribute"},{"location":"how-to-contribute/#how-to-contribute","text":"","title":"How to contribute"},{"location":"how-to-contribute/#prerequisites","text":"Visual Studio Code \ud83d\ude44 Mono .Net Core 2.0 Node.js Yarn","title":"Prerequisites"},{"location":"how-to-contribute/#building","text":"Fork, from the github interface https://github.com/ionide/ionide-vscode-fsharp - if you don't use a certificate for commiting to github: git clone https://github.com/YOUR_GITHUB_USER/ionide-vscode-fsharp.git if you use a certificate for github authentication: git clone git@github.com:YOUR_GITHUB_USER/ionide-vscode-fsharp.git","title":"Building"},{"location":"how-to-contribute/#first-time-build","text":"cd ionide-vscode-fsharp yarn install dotnet restore cd src dotnet restore cd .. ./build.sh # or build.cmd if your OS is Windows Everything is done via build.cmd \\ build.sh . build Build does a full-build, including package installation and copying some necessary files. It should always be done at least once after any clone/pull. If a git dependency fail to build paket won't re-do it you can run their build scripts manually: In paket-files\\github.com\\fsharp\\FsAutoComplete run build LocalRelease In paket-files\\github.com\\fsharp-editing\\Forge run build Build In VSCode two configurations are possible to run: Use Build and Launch Extension Start the Watch task and when a build is done start Launch Only","title":"First time build:"},{"location":"how-to-contribute/#working-with-fsac","text":"Run build.cmd Build \\ build.sh Build Open Ionide-vscode-fsharp in VSCode. Set devMode to true in src/Core/LanguageService.fs Open FSAC in VS Start FSAC.Suave in VS Press F5 in VSCode to build Ionide and start experimental instance","title":"Working with FSAC"},{"location":"options/","text":"List of options F# Plugin options FSharp.fsacRuntime Choose the runtime of FsAutoComplete (FSAC). Require restart Possible values: net - run FSAC using Full Framework (mono on non-Windows) netcore ( Experimental ) - run FSAC using .Net Core. Default value: net FSharp.workspaceMode Choose the workspace mode - way in which projects are detected in currently opened folder. Possible values: sln - Tries to detecl .sln file in current workspace. If there are more than one .sln files user will be asked which one to use. If there is no .sln file in workspace service will fallback to directory mode. Search performed by FSAC using FSharp.workspaceModePeekDeepLevel setting. directory - Ionide loads all detected projects in the directory. Search performed by FSAC using FSharp.workspaceModePeekDeepLevel setting. ionideSearch - Ionide loads all detected projects in the directory. Search performed by Ionide - it was default mode pre-3.0.0 version. Default value: sln FSharp.workspaceModePeekDeepLevel Defines the depth level of directory hierarchy when searching for sln/projects Possible values: [0...99] Default value: 2 FSharp.workspaceLoader Choose way the FSAC loads projects Possible values: projects - loading projects is invoked by project request from Ionide. It's done synchronusly, one-by-one on the plugin startup. Using ProjectCracker for non-SDK projects, dotnet-project-info for SDK based projects. workspaceLoad ( Experimental ) - loading projects is triggered by workspaceLoad request from Ionide. Process is done asynchronusly, notifications are pushed by FSAC to Ionide through web sockets. Default value: projects FSharp.logLanguageServiceRequests Enable logging for F# Language Service requests (FSAC) to either an output channel, the developer tools console, or both Possible values: none - turns off logging output - logs to output channel devconsole - logs to developer console both - logs to both output channel and developer console Default value: output FSharp.logLanguageServiceRequestsOutputWindowLevel Set the verbosity for F# Language Service Output Channel Possible values: DEBUG INFO WARN ERROR Default value: INFO FSharp.toolsDirPath The directory containing the F# tools Possible values: any string Default value: \"\" FSharp.monoPath The path to Mono executable Possible values: any string Default value: mono FSharp.fsiFilePath The path to the F# Interactive tool used by Ionide-FSharp. Useful for setting 64-bits FSI in some cases. Possible values: any string Default value: \"\" FSharp.keywordsAutocomplete Includes keywords in autocomplete Possible values: bool Default value: true FSharp.externalAutocomplete Includes external (from unopen modules and namespaces) symbols in autocomplete. Automatically adds open statements. Possible values: bool Default value: true FSharp.linter Enables integration with FSharpLinter (additional warnings and refactorings) Possible values: bool Default value: true FSharp.unusedOpensAnalyzer Enables detection of unused opens, provides quick fix. Possible values: bool Default value: true FSharp.unusedDeclarationsAnalyzer Enables detection of unused declarations, provides quick fix. Possible values: bool Default value: true FSharp.simplifyNameAnalyzer Enables detection of symbols usages that can be simplified, provides quick fix. Possible values: bool Default value: true FSharp.resolveNamespaces Enables resolve unopened namespaces and modules code fix. Possible values: bool Default value: true FSharp.fsiExtraParameters Allows to pass extra parameters to FSI process Possible values: array of strings Default value: [] FSharp.saveOnSendLastSelection Save Current file before send LastSelection to FSI Possible values: bool Default value: false FSharp.msbuildLocation Use a specific version of msbuild to build this project. Possible values: string Default value: \"\" FSharp.msbuildAutoshow Automatically shows MsBuild output panel Possible values: bool Default value: false FSharp.msbuildHost Use specific MSBuild host Possible values: .net - uses MsBuild installed by VS or MsBuild Tools .net core - uses dotnet msbuild ask at first use - promts user to choose when first time needed auto - automatically choose host based on project file Default value: auto FSharp.enableTreeView Enables solution explorer. Requires restart Possible values: bool Default value: true FSharp.codeOutline Enables Code Outline tree view. Requires restart Possible values: bool Default value: true FSharp.lineLens.enabled Usage mode for LineLens Possible values: never - never show LineLenses replaceCodeLens - show LineLenses if CodeLenses are disabled always - always show LineLenses Default value: never FSharp.lineLens.prefix The prefix displayed before the signature. Possible values: string Default value: // FSharp.recordStubGeneration Enables record stub generation. Possible values: bool Default value: true Paket Plugin options FAKE Plugin options","title":"List of options"},{"location":"options/#list-of-options","text":"","title":"List of options"},{"location":"options/#f-plugin-options","text":"","title":"F# Plugin options"},{"location":"options/#fsharpfsacruntime","text":"Choose the runtime of FsAutoComplete (FSAC). Require restart Possible values: net - run FSAC using Full Framework (mono on non-Windows) netcore ( Experimental ) - run FSAC using .Net Core. Default value: net","title":"FSharp.fsacRuntime"},{"location":"options/#fsharpworkspacemode","text":"Choose the workspace mode - way in which projects are detected in currently opened folder. Possible values: sln - Tries to detecl .sln file in current workspace. If there are more than one .sln files user will be asked which one to use. If there is no .sln file in workspace service will fallback to directory mode. Search performed by FSAC using FSharp.workspaceModePeekDeepLevel setting. directory - Ionide loads all detected projects in the directory. Search performed by FSAC using FSharp.workspaceModePeekDeepLevel setting. ionideSearch - Ionide loads all detected projects in the directory. Search performed by Ionide - it was default mode pre-3.0.0 version. Default value: sln","title":"FSharp.workspaceMode"},{"location":"options/#fsharpworkspacemodepeekdeeplevel","text":"Defines the depth level of directory hierarchy when searching for sln/projects Possible values: [0...99] Default value: 2","title":"FSharp.workspaceModePeekDeepLevel"},{"location":"options/#fsharpworkspaceloader","text":"Choose way the FSAC loads projects Possible values: projects - loading projects is invoked by project request from Ionide. It's done synchronusly, one-by-one on the plugin startup. Using ProjectCracker for non-SDK projects, dotnet-project-info for SDK based projects. workspaceLoad ( Experimental ) - loading projects is triggered by workspaceLoad request from Ionide. Process is done asynchronusly, notifications are pushed by FSAC to Ionide through web sockets. Default value: projects","title":"FSharp.workspaceLoader"},{"location":"options/#fsharploglanguageservicerequests","text":"Enable logging for F# Language Service requests (FSAC) to either an output channel, the developer tools console, or both Possible values: none - turns off logging output - logs to output channel devconsole - logs to developer console both - logs to both output channel and developer console Default value: output","title":"FSharp.logLanguageServiceRequests"},{"location":"options/#fsharploglanguageservicerequestsoutputwindowlevel","text":"Set the verbosity for F# Language Service Output Channel Possible values: DEBUG INFO WARN ERROR Default value: INFO","title":"FSharp.logLanguageServiceRequestsOutputWindowLevel"},{"location":"options/#fsharptoolsdirpath","text":"The directory containing the F# tools Possible values: any string Default value: \"\"","title":"FSharp.toolsDirPath"},{"location":"options/#fsharpmonopath","text":"The path to Mono executable Possible values: any string Default value: mono","title":"FSharp.monoPath"},{"location":"options/#fsharpfsifilepath","text":"The path to the F# Interactive tool used by Ionide-FSharp. Useful for setting 64-bits FSI in some cases. Possible values: any string Default value: \"\"","title":"FSharp.fsiFilePath"},{"location":"options/#fsharpkeywordsautocomplete","text":"Includes keywords in autocomplete Possible values: bool Default value: true","title":"FSharp.keywordsAutocomplete"},{"location":"options/#fsharpexternalautocomplete","text":"Includes external (from unopen modules and namespaces) symbols in autocomplete. Automatically adds open statements. Possible values: bool Default value: true","title":"FSharp.externalAutocomplete"},{"location":"options/#fsharplinter","text":"Enables integration with FSharpLinter (additional warnings and refactorings) Possible values: bool Default value: true","title":"FSharp.linter"},{"location":"options/#fsharpunusedopensanalyzer","text":"Enables detection of unused opens, provides quick fix. Possible values: bool Default value: true","title":"FSharp.unusedOpensAnalyzer"},{"location":"options/#fsharpunuseddeclarationsanalyzer","text":"Enables detection of unused declarations, provides quick fix. Possible values: bool Default value: true","title":"FSharp.unusedDeclarationsAnalyzer"},{"location":"options/#fsharpsimplifynameanalyzer","text":"Enables detection of symbols usages that can be simplified, provides quick fix. Possible values: bool Default value: true","title":"FSharp.simplifyNameAnalyzer"},{"location":"options/#fsharpresolvenamespaces","text":"Enables resolve unopened namespaces and modules code fix. Possible values: bool Default value: true","title":"FSharp.resolveNamespaces"},{"location":"options/#fsharpfsiextraparameters","text":"Allows to pass extra parameters to FSI process Possible values: array of strings Default value: []","title":"FSharp.fsiExtraParameters"},{"location":"options/#fsharpsaveonsendlastselection","text":"Save Current file before send LastSelection to FSI Possible values: bool Default value: false","title":"FSharp.saveOnSendLastSelection"},{"location":"options/#fsharpmsbuildlocation","text":"Use a specific version of msbuild to build this project. Possible values: string Default value: \"\"","title":"FSharp.msbuildLocation"},{"location":"options/#fsharpmsbuildautoshow","text":"Automatically shows MsBuild output panel Possible values: bool Default value: false","title":"FSharp.msbuildAutoshow"},{"location":"options/#fsharpmsbuildhost","text":"Use specific MSBuild host Possible values: .net - uses MsBuild installed by VS or MsBuild Tools .net core - uses dotnet msbuild ask at first use - promts user to choose when first time needed auto - automatically choose host based on project file Default value: auto","title":"FSharp.msbuildHost"},{"location":"options/#fsharpenabletreeview","text":"Enables solution explorer. Requires restart Possible values: bool Default value: true","title":"FSharp.enableTreeView"},{"location":"options/#fsharpcodeoutline","text":"Enables Code Outline tree view. Requires restart Possible values: bool Default value: true","title":"FSharp.codeOutline"},{"location":"options/#fsharplinelensenabled","text":"Usage mode for LineLens Possible values: never - never show LineLenses replaceCodeLens - show LineLenses if CodeLenses are disabled always - always show LineLenses Default value: never","title":"FSharp.lineLens.enabled"},{"location":"options/#fsharplinelensprefix","text":"The prefix displayed before the signature. Possible values: string Default value: //","title":"FSharp.lineLens.prefix"},{"location":"options/#fsharprecordstubgeneration","text":"Enables record stub generation. Possible values: bool Default value: true","title":"FSharp.recordStubGeneration"},{"location":"options/#paket-plugin-options","text":"","title":"Paket Plugin options"},{"location":"options/#fake-plugin-options","text":"","title":"FAKE Plugin options"},{"location":"paket/","text":"Paket Integration","title":"Paket integration"},{"location":"paket/#paket-integration","text":"","title":"Paket Integration"},{"location":"project/","text":"Project managment General information Project explorere MsBuild integration","title":"Project managment"},{"location":"project/#project-managment","text":"General information","title":"Project managment"},{"location":"project/#project-explorere","text":"","title":"Project explorere"},{"location":"project/#msbuild-integration","text":"","title":"MsBuild integration"},{"location":"testing/","text":"Testing Expecto integration","title":"Testing"},{"location":"testing/#testing","text":"","title":"Testing"},{"location":"testing/#expecto-integration","text":"","title":"Expecto integration"}]}